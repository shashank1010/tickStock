{"version":3,"sources":["components/Header.jsx","store/actions.js","store/actionTypes.js","utils/presentation.js","components/TickerRow.jsx","components/Ticker.jsx","components/StockHistory.jsx","components/TickerSocket.js","components/App.js","store/reducers.js","store/store.js","serviceWorker.js","index.js"],"names":["mapDispatchToProps","clearStockHistory","type","Header","connect","_ref","react_default","a","createElement","Navbar_default","variant","bg","expand","className","Brand","as","Link","to","Nav_default","eventKey","onSelect","dist","render","_ref2","online","Item","concat","lang","navigator","language","userLanguage","number","Intl","NumberFormat","style","currency","currencyDisplay","minimumFractionDigits","maximumFractionDigits","TickerRow","symbol","stock","price","currentTime","history","_history$slice","slice","length","_history$slice2","Object","slicedToArray","oldCost","newCost","hasAppreciation","sparkProps","data","map","height","limit","margin","react_router_dom","toUpperCase","format","lib_default","date","timeStamp","build","fill","opacity","color","size","spotColors","0","-1","1","defaultProp","Date","now","CustomAlert","icon","message","children","Alert_default","src","alt","ConnectionError","connection","Ticker_CustomAlert","LoadingDataInfo","_ref3","Ticker","_ref5","_ref5$stockListReduce","stockListReducer","stockList","reset","connectionStateReducer","objectSpread","_ref4","stockListKeys","keys","sort","hasError","Ticker_ConnectionError","Ticker_LoadingDataInfo","connetion","Fragment","Table_default","striped","bordered","hover","width","components_TickerRow","key","StockNoDataInfo","Heading","StockHistoryDumb","_this$props","this","props","symbolLabel","otherStocks","filter","stockSymbol","StockHistory_StockNoDataInfo","toConsumableArray","reverse","Dropdown_default","Toggle","id","Menu","i","self","_toLocaleString$split","toLocaleString","split","_toLocaleString$split2","time","isLastItem","difference","absoluteDiff","Math","abs","React","Component","StockHistory","_ref4$stockListReduce","TickerSocketDumb","_this2","WebSocket","onmessage","updateStocklist","onopen","e","updateConnectionStatus","onclose","onerror","updateConnection","apply","arguments","payload","status","undefined","TickerSocket","toggleStock","App","components_TickerSocket","components_Header","Container_default","react_router","exact","path","component","match","params","toLowerCase","components_StockHistory","initialState","connectionState","updateStocks","currentList","newStocks","JSON","parse","forEach","push","combineReducers","state","action","createStore","reducers","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","es","store","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f0e465bd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\"\nimport { Detector } from \"react-detect-offline\"\nimport { Link } from \"react-router-dom\"\nimport { connect } from \"react-redux\"\n\nimport Navbar from \"react-bootstrap/Navbar\"\nimport Nav from \"react-bootstrap/Nav\"\n\nimport { clearStockHistory } from \"../store/actions\"\n\nconst HeaderDumb = ({ clearStockHistory }) => {\n\treturn (\n\t\t<Navbar variant=\"dark\" bg=\"dark\" expand=\"lg\" className=\"position-sticky sticky-top\">\n\t\t\t<Navbar.Brand as={Link} to=\"/\">Stock Ticker</Navbar.Brand>\n\t\n\t\t\t<Nav className=\"ml-auto\">\n\t\t\t\t<Nav.Link eventKey=\"resetStocks\" onSelect={ () => {\n\t\t\t\t\tclearStockHistory()\n\t\t\t\t} }>Reset Stock History</Nav.Link>\n\t\t\t\t\t<Detector render={({ online }) => (\n\t\t\t\t\t\t<Nav.Item className={`live-status my-n2 d-flex align-items-center justify-content-center px-3 ml-2 font-weight-bold ${online ? \"bg-white text-success\" : \"bg-danger text-white\"}`}>\n\t\t\t\t\t\t\t{online ? \"LIVE\" : \"OFFLINE\"}\n\t\t\t\t\t\t</Nav.Item>\n\t\t\t\t\t)} />\n\t\t\t</Nav>\n\t\t</Navbar>\n\t)\n}\n\n\n\nconst mapDispatchToProps = { clearStockHistory }\nconst Header = connect(\n    null,\n    mapDispatchToProps\n  )(HeaderDumb)\n\nexport default Header\n\n\n\nHeaderDumb.propTypes = {\n\tclearStockHistory: PropTypes.func.isRequired\n}","import { UPDATE_STOCKLIST, RESET_HISTORY, TOGGLE_STOCK, UPDATE_CONNECTION } from \"./actionTypes\"\n\nexport const updateStocklist = payload => ({\n    type: UPDATE_STOCKLIST,\n    payload\n})\n\nexport const clearStockHistory = () => ({\n    type: RESET_HISTORY\n})\n\nexport const toggleStock = symbol => ({\n    type: TOGGLE_STOCK,\n    symbol\n})\n\nexport const updateConnection = (status = \"\", message = \"\", hasError = false) => ({\n    type: UPDATE_CONNECTION,\n    payload: {\n        status, message, hasError\n    }\n})","export const GET_STOCKLIST = \"GET_STOCKLIST\" \nexport const UPDATE_STOCKLIST = \"UPDATE_STOCKLIST\"\n\nexport const TOGGLE_STOCK = \"TOGGLE_STOCK\"\nexport const RESET_HISTORY = \"RESET_HISTORY\"\n\nexport const UPDATE_CONNECTION = \"UPDATE_CONNECTION\"","export const lang = navigator.language || navigator.userLanguage\nexport const number = Intl.NumberFormat(lang, {\n    style: 'currency',\n    currency: 'USD',\n    currencyDisplay: 'code',\n    minimumFractionDigits: '2',\n    maximumFractionDigits: '2',\n})","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Timeago from \"react-timeago\"\nimport { Link } from \"react-router-dom\"\nimport { Sparklines, SparklinesCurve, SparklinesSpots, SparklinesBars } from 'react-sparklines';\n\nimport { number } from \"../utils/presentation\"\n\nconst TickerRow = ({ symbol, stock, currentTime }) => {\n    const { price, history } = stock\n    const [ oldCost, newCost ] = history.slice(history.length - 2)\n    const hasAppreciation = newCost ? oldCost.price < newCost.price : null\n    const data = history.map(({ price }) => price)\n    const sparkProps = {\n        data,\n        height: 15,\n        limit: 25,\n        margin: 1\n    }\n    return (\n        <tr className=\"vert\">\n            <td className=\"align-middle\">\n                <Link to={ `/${symbol}` }><strong>{ symbol.toUpperCase() }</strong></Link>\n            </td>\n            <td className={`align-middle text-${ hasAppreciation === null ? \"\" : hasAppreciation === false ? 'danger' : 'success'}`}>{ number.format(price) }</td>\n            <td className=\"align-middle\">\n                <Timeago date={ (newCost || oldCost).timeStamp } />\n            </td>\n            <td className=\"align-middle p-0\">\n                <Sparklines { ...sparkProps }>\n                    <SparklinesBars style={{ fill: '#41c3f9', opacity: 0.3 }} />\n                    <SparklinesCurve color=\"#41c3f9\" style={{ fill: \"none\" }} />\n                    <SparklinesSpots size={1} spotColors={{ '0': 'white', '-1': 'red', '1': 'green' }} />\n                </Sparklines>\n            </td>\n        </tr>\n    )\n}\n\nexport default TickerRow\n\nTickerRow.propTypes = {\n    currentTime: PropTypes.number,\n    symbol: PropTypes.string.isRequired,\n    stock: PropTypes.shape({\n        price: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(PropTypes.shape({\n            price: PropTypes.number.isRequired,\n            timeStamp: PropTypes.number\n        })).isRequired\n    }).isRequired\n}\n\nTickerRow.defaultProp = {\n    currentTime: Date.now()\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { connect } from \"react-redux\"\n\nimport Table from \"react-bootstrap/Table\"\nimport Alert from \"react-bootstrap/Alert\"\n\nimport TickerRow from \"./TickerRow\"\n\nconst CustomAlert = ({ variant, icon, message, children }) => (\n    <Alert variant={variant} className=\"rounded-bottom text-center border-0 rounded-top-0 loader d-flex align-items-center justify-content-center flex-column\">\n        {\n            icon && <img src={`./${icon}.svg`} alt={ icon } />\n        }\n        <div className=\"mt-3\">\n            {\n                message || children\n            }\n        </div>\n    </Alert>\n)\n\n\nconst ConnectionError = ({connection}) => (\n    <CustomAlert variant=\"danger\" icon=\"error\" message={ connection.message } />\n)\n\nconst LoadingDataInfo = ({ message }) => (\n    <CustomAlert variant=\"dark\" icon=\"loader\" message={message} />\n)\n\n\nconst TickerDumb = ({ stockList, reset, connection }) => {\n    const stockListKeys = Object.keys(stockList).sort()\n    const currentTime = Date.now()\n\n    if(connection.hasError)\n        return <ConnectionError connection={ connection } />\n\n    if(stockListKeys.length === 0){\n        const message = !reset ? \"Fetching Stocks\" : <span>Stock data has been flushed.<br />Fresh data will be loaded soon.</span>\n        return <LoadingDataInfo message={ message }  connetion={ connection } />\n    }\n\n    return (\n        <>\n            <Table striped bordered hover size=\"sm\" className=\"m-0\">\n                <thead>\n                    <tr>\n                        <th style={{ width: '10ch' }}>Code</th>\n                        <th style={{ width: '10ch' }}>Price</th>\n                        <th style={{ width: \"15ch\" }}>Last Updated At</th>\n                        <th>History</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        stockListKeys.length > 0 &&\n                        stockListKeys.map((symbol) => (\n                            <TickerRow\n                                key={ symbol }\n                                symbol={ symbol }\n                                stock={ stockList[symbol] }\n                                currentTime = { currentTime }\n                                />\n                        ))\n                    }\n                </tbody>\n            </Table>\n        </>\n    )\n}\n\nconst mapStateToProps = ({ stockListReducer: { stockList, reset}, connectionStateReducer }) => {\n    return ({ stockList, reset, connection: { ...connectionStateReducer } })\n}\n// const mapDispatchToProps = { clearStockHistory }\n\nconst Ticker = connect(mapStateToProps)(TickerDumb)\n\n\nexport default Ticker\n\nTickerDumb.propTypes = {\n    stockList: PropTypes.objectOf(\n        PropTypes.shape({\n            price: PropTypes.number.isRequired,\n            history: PropTypes.arrayOf(PropTypes.shape({\n                price: PropTypes.number.isRequired,\n                timeStamp: PropTypes.number.isRequired\n            })).isRequired\n        })\n    ).isRequired,\n    connection: PropTypes.shape({\n        status: PropTypes.string.isRequired,\n        message: PropTypes.string.isRequired,\n        hasError: PropTypes.bool.isRequired\n    }).isRequired\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { connect } from \"react-redux\"\nimport Alert from \"react-bootstrap/Alert\"\nimport Table from \"react-bootstrap/Table\"\nimport Dropdown from \"react-bootstrap/Dropdown\"\nimport { Sparklines, SparklinesCurve, SparklinesSpots, SparklinesReferenceLine } from 'react-sparklines';\nimport { Link } from \"react-router-dom\"\n\nimport { number } from \"../utils/presentation\"\n\nconst StockNoDataInfo = ({ symbol }) => (\n\t<Alert variant=\"info\">\n\t\t<Alert.Heading>Something seems to be wrong! We have no history found for <strong>{ symbol }</strong></Alert.Heading>\n\t\t<p>\n\t\t\tWell, this is embarrassing! Probably you are here too early, or the symbol is invalid.<br />\n\t\t\tGive it some time, if the symbol is valid the it's history will show up here.\n\t\t</p>\n\t\t<hr />\n\t\t<p className=\"mb-0\">\n\t\t\tFeel free to navigate <Alert.Link as={Link} to=\"/\">back to the list</Alert.Link> and pick a symbol to view its history\n\t\t</p>\n\t</Alert>\n)\n\nclass StockHistoryDumb extends React.Component {\n\trender() {\n\t\tconst { stockList, symbol } = this.props\n\t\tconst stock = stockList[symbol] || null\n\t\tconst symbolLabel = symbol.toUpperCase()\n\t\tconst otherStocks = Object.keys(stockList).filter(stockSymbol => stockSymbol !== symbol)\n\n\t\tif(stock === null)\n\t\t\treturn <StockNoDataInfo symbol={ symbolLabel } />\n\n\t\tconst history = [...stock.history].reverse()\n\t\tconst data = history.map(({ price }) => price)\n\n\t\tconst sparkProps = {\n\t\t\t\tdata: data,\n\t\t\t\twidth: 100,\n\t\t\t\theight: 20,\n\t\t\t\tlimit: 40,\n\t\t\t\tmargin: 1,\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h1>\n\t\t\t\t\tTicker Symbol:\n\t\t\t\t\t\n\t\t\t\t\t<Dropdown as=\"span\" className=\"d-inline-block ml-1\">\n\t\t\t\t\t\t<Dropdown.Toggle as=\"strong\" variant=\"link\" id=\"stick-list-dropdown\">\n\t\t\t\t\t\t\t{ symbolLabel }\n\t\t\t\t\t\t</Dropdown.Toggle>\n\n\t\t\t\t\t\t<Dropdown.Menu>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\totherStocks.map((symbol) => (\n\t\t\t\t\t\t\t\t\t<Dropdown.Item key={ symbol } as={ Link } to={`/${symbol}`}>{ symbol.toUpperCase() }</Dropdown.Item>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Dropdown.Menu>\n\t\t\t\t\t</Dropdown>\n\t\t\t\t</h1>\n\n\t\t\t\t{\n\t\t\t\t\tdata.length > 1\n\t\t\t\t\t? (\n\t\t\t\t\t\t<div className=\"my-3\" >\n\t\t\t\t\t\t\t<Sparklines { ...sparkProps }>\n\t\t\t\t\t\t\t\t<SparklinesCurve color=\"#41c3f9\" style={{ fill: \"lightslategray\" }} />\n\t\t\t\t\t\t\t\t<SparklinesSpots size={1} spotColors={{ '0': 'white', '-1': 'red', '1': 'green' }} />\n\t\t\t\t\t\t\t\t<SparklinesReferenceLine type=\"mean\" />\n\t\t\t\t\t\t\t</Sparklines>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t\t: (\n\t\t\t\t\t\t<Alert variant=\"info\" className=\"text-center\">\n\t\t\t\t\t\t\tGraph will be load here when more data is available.\n\t\t\t\t\t\t</Alert>\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\t<Table striped bordered hover size=\"sm\" className=\"m-0\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<th style={{ width: \"5ch\" }}></th>\n\t\t\t\t\t\t\t\t\t\t<th>Price</th>\n\t\t\t\t\t\t\t\t\t\t<th>Difference</th>\n\t\t\t\t\t\t\t\t\t\t<th>Date</th>\n\t\t\t\t\t\t\t\t\t\t<th>Time</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thistory.map(({price, timeStamp}, i, self) => {\n\t\t\t\t\t\t\t\t\tconst [date, time] = (new Date(timeStamp)).toLocaleString().split(',')\n\t\t\t\t\t\t\t\t\tconst isLastItem = i + 1 === history.length\n\t\t\t\t\t\t\t\t\tconst difference = !isLastItem && history[i+1].price - price\n\t\t\t\t\t\t\t\t\tconst absoluteDiff = isLastItem ? '-' : number.format(Math.abs(difference))\n\t\t\t\t\t\t\t\t\tconst className = isLastItem ? \"\" : difference > 0 ? \"danger\" : \"success\"\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<tr key={i}>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ self.length - i }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ number.format(price) }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td className={ className && `text-${className}` }>{ absoluteDiff }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ date }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ time }</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t</Table>\n\t\t\t</>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = ({ stockListReducer: { symbol, stockList } }) => {\n\treturn { symbol, stockList }\n}\nconst StockHistory = connect(mapStateToProps)(StockHistoryDumb)\n\nexport default StockHistory\n\nStockHistoryDumb.propTypes = {\n\tsymbol: PropTypes.string.isRequired,\n\tstockList: PropTypes.objectOf(\n\t\tPropTypes.shape({\n\t\t\t\tprice: PropTypes.number.isRequired,\n\t\t\t\thistory: PropTypes.arrayOf(PropTypes.shape({\n\t\t\t\t\t\tprice: PropTypes.number.isRequired,\n\t\t\t\t\t\ttimeStamp: PropTypes.number.isRequired\n\t\t\t\t})).isRequired\n\t\t})\n\t).isRequired\n}","import React from \"react\"\nimport { connect } from 'react-redux'\n\nimport { updateStocklist, updateConnection } from \"../store/actions\"\nconst socketURL = 'ws://stocks.mnet.website'\n\nclass TickerSocketDumb extends React.Component{\n\thasError = false\n\tmessage = \"\"\n\tcomponentDidMount() {\n\t\tthis.connection = new WebSocket(socketURL);\n\t\tthis.connection.onmessage = this.props.updateStocklist\n\n\t\tthis.connection.onopen = (e) => {\n\t\t\tthis.hasError = false\n\t\t\tthis.message = \"\"\n\t\t\tthis.updateConnectionStatus(e.type, this.message, this.hasError)\n\t\t}\n\n\t\tthis.connection.onclose = (e) => {\n\t\t\tthis.updateConnectionStatus(e.type, this.message, this.hasError)\n\t\t}\n\n\t\tthis.connection.onerror = (e) => {\n\t\t\tthis.hasError = true\n\t\t\tthis.message = \"Something went wrong\"\n\t\t\tthis.updateConnectionStatus(e.type, this.message, this.hasError)\n\t\t}\n\t}\n\n\tupdateConnectionStatus() {\n\t\tthis.props.updateConnection(...arguments)\n\t}\n\n\trender() {\n\t\treturn null\n\t}\n}\n\n\nconst mapDispatchToProps = { updateStocklist, updateConnection }\nconst TickerSocket = connect(null, mapDispatchToProps)(TickerSocketDumb)\n\nexport default TickerSocket","import '../styles/App.css';\n\nimport React from 'react';\nimport PropTypes from \"prop-types\"\nimport Container from 'react-bootstrap/Container'\nimport { connect } from \"react-redux\"\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"\n\nimport Header from \"./Header\"\nimport Ticker from \"./Ticker\"\nimport StockHistory from \"./StockHistory\"\nimport TickerSocket from \"./TickerSocket\"\n\nimport { toggleStock } from \"../store/actions\"\n\nconst AppDumb = ({ toggleStock }) => {\n\treturn (\n\t\t<>\n\t\t\t<TickerSocket />\n\t\t\t<Router>\n\t\t\t\t<Header />\n\t\t\t\t<Container className=\"py-3 stock-ticker-app\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={ Ticker } />\n\t\t\t\t\t\t<Route path=\"/:symbol\" children={ ({ match }) => {\n\t\t\t\t\t\t\tconst symbol = match.params.symbol.toLowerCase()\n\t\t\t\t\t\t\ttoggleStock(symbol)\n\t\t\t\t\t\t\treturn <StockHistory />\n\t\t\t\t\t\t} } />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Container>\n\t\t\t</Router>\n\t\t</>\n\t);\n}\n\nconst mapDispatchToProps = { toggleStock }\nconst App = connect(null, mapDispatchToProps)(AppDumb)\n\nexport default App\n\nAppDumb.propTypes = {\n\ttoggleStock: PropTypes.func.isRequired\n}","import { combineReducers } from \"redux\";\nimport { UPDATE_STOCKLIST, TOGGLE_STOCK, RESET_HISTORY, UPDATE_CONNECTION } from \"./actionTypes\"\n\nconst initialState = {\n    stockList: {},\n    symbol: null,\n    reset: false,\n    connectionState: {\n        status: \"\",\n        message: \"\",\n        hasError: false\n    }\n}\n\t\nfunction updateStocks({ data }, currentList) {\n    const newStocks = JSON.parse(data)\n    const timeStamp = Date.now()\n\n    const stockList = currentList\n\n    newStocks.forEach(([symbol, value]) => {\n        const price = +value\n        if(currentList[symbol]){ \n            currentList[symbol].price = price\n            currentList[symbol].history.push({ price, timeStamp })\n        } else {\n            currentList[symbol] = { price, history: [{ price, timeStamp }] }\n        }\n    })\n\n    return stockList\n}\n\nconst stockListReducer  = (state = initialState, action) => {\n    switch(action.type) {\n        case UPDATE_STOCKLIST:\n            return { ...state, stockList: updateStocks(action.payload, { ...state.stockList }), reset: false }\n        case RESET_HISTORY: \n            return { ...state, stockList: {}, reset: true }\n        case TOGGLE_STOCK:\n            return {\n                ...state, symbol: action.symbol\n            }\n        default:\n            return state;\n    }\n}\n\nconst connectionStateReducer = (state = initialState.connectionState, action) => {\n    switch (action.type){\n        case UPDATE_CONNECTION:\n            return { ...state, ...action.payload } \n        default:\n        return state\n    }\n}\n\nexport default combineReducers({ stockListReducer, connectionStateReducer });","import { createStore } from \"redux\";\nimport reducers from \"./reducers\";\n\nexport default createStore(reducers);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from \"react-redux\"\nimport store from './store/store'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={ store }><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}